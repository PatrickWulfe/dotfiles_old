#+TITLE: Doom Emacs Config
#+AUTHOR: Patick Wulfe
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* User info
#+begin_src elisp
(setq user-full-name "Patrick Wulfe"
      user-mail-address "wulfep@gmail.com")
#+end_src

* UI
** Fonts
#+begin_src elisp
(setq doom-font (font-spec :family "Fira Code" :size 16 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "Noto Sans" :size 13)
      doom-big-font (font-spec :family "Literation Sans")
      )
#+end_src

** Theme
#+begin_src elisp
(setq doom-theme 'my-doom-horizon)
#+end_src

** Line Numbers
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

** Scroll margin
#+begin_src elisp
(setq scroll-margin 10)
#+end_src

** Disable exit prompt
#+begin_src elisp
(setq confirm-kill-emacs nil)
#+end_src

* General Config
** Enable auto-save and backup files
#+begin_src elisp
(setq auto-save-default t
      make-backup-files t)
#+end_src

** Folder locations
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

* Package Settings
** Projectile
#+begin_src elisp
(setq projectile-project-search-path '("~/dev/src/"))
#+end_src
* TODO Keybinds
- Add error next/prev stuff
- Add jump to test file
- Add binds for dotfiles
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
** Projectile
#+begin_src elisp
(map! :leader
      (:desc "Go to test/implimentation file" "p ," #'projectile-toggle-between-implimentation-and-test))
#+end_src

** Babel
#+begin_src elisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
#+end_src

** Dotfiles
#+begin_src elisp
(map! :leader
        (:prefix ("f ." . "open dotfile")
         :desc "Edit doom config.org" "d" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
         :desc "Open qtile README.org" "q" #'(lambda () (interactive) (find-file "~/.config/qtile/README.org"))
         :desc "Edit alacritty alacritty.yml" "a" #'(lambda () (interactive) (find-file "~/.config/alacritty/alacritty.yml"))
         :desc "Open fish README.org" "f" #'(lambda () (interactive) (find-file "~/.config/fish/README.org"))
         ))
#+end_src

* Lang Specific Configs
** Flutter

Flutter setup with major mode keybinds
#+begin_src elisp
(use-package lsp-dart
  :init
  (map! :map dart-mode-map
        (:localleader
        (:prefix ("p" . "pub")
         "g" #'lsp-dart-pub-get ))))
(with-eval-after-load 'projectile
  (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
  (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))
;; (use-package dart-mode
;;   :hook (dart-mode . (lambda ()
;;                        (add-hook 'after-save-hook #'flutter-run-or-hot-reload nil t))))
(use-package flutter-l10n-flycheck
  :after flutter
  :config
  (flutter-l10n-flycheck-setup))
#+end_src
