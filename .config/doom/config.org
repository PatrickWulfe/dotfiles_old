#+TITLE: Doom Emacs Config
#+AUTHOR: Patick Wulfe
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* User info
Setting personal info
#+begin_src elisp
(setq user-full-name "Patrick Wulfe"
      user-mail-address "wulfep@gmail.com")
#+end_src

* UI
** Fonts
I really like the 'r' and 'g' in Fira Code, so it's my favorite font for coding
Open sans is close to the sans font Google uses for Android, which I'm a big fan of
#+begin_src elisp
(setq doom-font (font-spec :family "Fira Code" :size 16 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "Open Sans" :size 13)
      doom-big-font (font-spec :family "Open Sans")
      doom-serif-font (font-spec :family "Fira Code" :weigth 'light)
      )
#+end_src

** Theme
I customized the horizon theme to adjust some of the syntax colors and background
#+begin_src elisp
(setq doom-theme 'my-doom-horizon)
#+end_src

Add highlighting to operators
[[https://stackoverflow.com/questions/5831036/how-to-customize-emacs-in-python-mode-to-highlight-operators]]
#+begin_src elisp
(defface font-lock-operator-face
  '((t (:foreground "#21BFC2"))) "Basic face for operator." :group 'basic-faces)
;; C-Like
(dolist (mode-iter '(c-mode c++-mode dart-mode glsl-mode java-mode javascript-mode rust-mode))
  (font-lock-add-keywords mode-iter
   '(("\\([~^&\|!<>=,.\\+*/%-;:?]\\)" 0 'font-lock-operator-face keep))))
;; Scripting
(dolist (mode-iter '(python-mode lua-mode))
  (font-lock-add-keywords mode-iter
   '(("\\([@~^&\|!<>:=,.\\+*/%-]\\)" 0 'font-lock-operator-face keep))))
#+end_src

** Nyan-Mode
Adds the Nyan-cat progress bar on the modeline
#+begin_src elisp
(use-package! nyan-mode
  :after doom-modeline
  :init
  (setq nyan-bar-length 40)
   (nyan-mode)
  )
#+end_src

** Rainbow Delimiters
Rainbow delimiters are amazing, incredibly useful for lisp and other languages that are parenth heavy
#+begin_src elisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

** Line Numbers
Relative line numbers to make vim commands easier
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

** Scroll margin
#+begin_src elisp
(setq
 scroll-conservatively 10
 scroll-step 1
 scroll-margin 10)
#+end_src

** Remove Scrollbars
We have nyan-mode so the scrollbar is redundant
#+begin_src elisp
(scroll-bar-mode -1)
#+end_src

** Disable exit prompt
Annoying and not useful when I want to be able to get in/out of Emacs in as little time as possible
#+begin_src elisp
(setq confirm-kill-emacs nil)
#+end_src

** Tabs
They're here if I want them, added a keybind to enable/disable them in the keybinds section
#+begin_src elisp
(setq centaur-tabs-height 32
      centaur-tabs-style "wave")
#+end_src

* General Config
** Linux Specifics
Adds opacity on Linux, I usually keep this high otherwise text can become hard to read
#+begin_src elisp
;; (when IS-LINUX
;;   (set-frame-parameter (selected-frame) 'alpha '(99 . 99))
;;   (add-to-list 'default-frame-alist '(alpha . (99 . 99)))
;;   (add-to-list 'default-frame-alist '(inhibit-double-buffering . t)))
#+end_src

** Make undo better
Increase the limit and give more fine tuned control on undo
#+begin_src elisp
(setq undo-limit 80000000
      evil-want-fine-undo t)
#+end_src

** Folder locations
Set default folder locations
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

* Package Settings
** Company
Move snippets above lsp
#+begin_src elisp
(setq +lsp-company-backends '(:separate company-yasnippet company-capf))
#+end_src

** Evil-Motion-Trainer
The popup notification is working, but I think it may be incompatible with Doom 3.0's alpha. May re-enable if it gets updated
#+begin_src elisp
;; (use-package! evil-motion-trainer
;;   :init
;;   (global-evil-motion-trainer-mode 1))
;;   ;; :config
;;   ;; (setq evil-motion-trainer-threshold 3))
;; ;; (setq evil-motion-trainer-super-annoying-mode t)
;; (map!
;;  :leader
;;  (:prefix-map ("t" . "toggle")
;;   :desc "Evil motion trainer" "t" #'evil-motion-trainer-mode))
#+end_src

** Evil-Snipe
Setting the scope for evil-snipe, the default is in line, which isn't nearly as useful
#+begin_src elisp
(setq evil-snipe-scope 'visible
      evil-snipe-spillover-scope 'buffer)
#+end_src

** Mixed-pitch
Add support for multiple fonts
#+begin_src elisp
(use-package mixed-pitch
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src

** Projectile
Add default project directory for projectile
#+begin_src elisp
(setq projectile-project-search-path '("~/dev/src/"))
#+end_src

Prompt to create new test file when not found
#+begin_src elisp
(setq projectile-create-missing-test-files t)
#+end_src

** Sublimity
Enables an attractive centered mode
#+begin_src elisp
;; (require 'sublimity-attractive)
;; (sublimity-mode 1)
;; (setq sublimity-attractive-centering-width 170)
#+end_src

** Treemacs
Default doom theme is minimal and doesn't use file type icons, I much prefer this one
#+begin_src elisp
(setq doom-themes-treemacs-theme "doom-colors")
#+end_src

** Yasnippets
Add custom snippet folder to personal config location for easy access with "SPC f p"
#+begin_src elisp
(use-package doom-snippets
  :load-path "~/.config/doom/snippets"
  :after yasnippet)
#+end_src

* Keybinds
** Dotfiles
Add bands to quickly access my dotfiles within Emacs
#+begin_src elisp
(map! :leader
        (:prefix ("f ." . "open dotfile")
         :desc "Edit doom config.org" "d" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
         :desc "Open qtile README.org" "q" #'(lambda () (interactive) (find-file "~/.config/qtile/README.org"))
         :desc "Edit alacritty.yml" "a" #'(lambda () (interactive) (find-file "~/.config/alacritty/alacritty.yml"))
         :desc "Open fish README.org" "f" #'(lambda () (interactive) (find-file "~/.config/fish/README.org"))
         ))
#+end_src

** Evil-Easymotion
Also prefer "SPC j" over "g s" for easymotion like in Spacemacs
#+begin_src elisp
(map! (:after evil-easymotion :leader "j" evilem-map))
(map! :leader :prefix ("j" . "jump"))
#+end_src

** General
*** Switch execute command and dired jump
I use M-x much more often and dired jump is redundent anyway since it is also bound to "SPC p f"
#+begin_src elisp
(map! :leader
      :desc "M-x" "SPC" #'execute-extended-command
      :desc "Find file in project" ":" #'projectile-find-file)
#+end_src

*** Set ',' as localleadder
I use this often enough that it's worth mapping the localleader away from "SPC m"
#+begin_src elisp
(setq doom-leader-key "SPC"
      doom-localleader-key ",")
#+end_src

*** Leader general commands
I prefer having the comment operator bound like in Spacemacs over "g c"
#+begin_src elisp
(map! :leader
      :desc "Comment operator" ";" #'evilnc-comment-operator)
#+end_src

** Org-mode
Add some org-mode keybinds
#+begin_src elisp
(after! org (map! :localleader
                  :map org-mode-map
                  :desc "Org babel tangle" "B" #'org-babel-tangle))
#+end_src

** Projectile
Add bind to go back and forth between test and implimentation files, useful for TDD and BDD
#+begin_src elisp
(map! :leader
      :desc "Go to test/implimentation file" "p j"
      #'projectile-toggle-between-implementation-and-test)
#+end_src

** Tabs
Just wanted to be able to turn tabs on/off
#+begin_src elisp
(map! :leader
      :desc "Tabs" "t T" #'centaur-tabs-mode)
#+end_src

** Yasnippet
Adding some utility binds for snippets
#+begin_src elisp
(map! :leader
      (:prefix ("y" . "snippets")
       :desc "Insert" "i" #'yas-insert-snippet
       :desc "New" "n" #'yas-new-snippet
       :desc "Tryout" "t" #'yas-tryout-snippet
      ))
#+end_src

* Lang Specific Configs
** Flutter
*** Flutter setup with major mode keybinds
Setting up Doom to be a Flutter IDE
#+begin_src elisp
(use-package lsp-dart
  :init
  (setq lsp-dart-flutter-sdk-dir "~/dev/sdks/flutter")
  (map! :map dart-mode-map
        (:localleader
        (:prefix ("p" . "pub")
         "g" #'lsp-dart-pub-get ))))
(use-package flutter
  :after dart-mode
  :custom
  (flutter-sdk-path "~/dev/sdks/flutter"))
#+end_src

*** Disable Run/Debug Code Lens
I have keybinds for these, and the goal is to never use the mouse, so I'll never click on these anyway, so they're just clutter
#+begin_src elisp
(setq lsp-dart-main-code-lens nil
      lsp-dart-test-code-lens nil)
#+end_src

*** Flycheck
#+begin_src elisp
(use-package flutter-l10n-flycheck
  :after flutter
  :config
  (flutter-l10n-flycheck-setup))
#+end_src

*** Projectile
#+begin_src elisp
(with-eval-after-load 'projectile
  (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
  (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))
(projectile-register-project-type 'flutter '("pubspec.yaml")
                                  :project-file "pubspec.yaml"
                                  :src-dir "lib/"
                                  :test "flutter test"
                                  :test-dir "test/"
                                  :test-suffix "_test")
#+end_src

** JavaScript
*** dap-mode setup
Set up dap mode for debugging JS
#+begin_src elisp
(require 'dap-node)
#+end_src

*** Keybinds
https://www.chadstovern.com/javascript-in-emacs-revisited/
#+begin_src elisp
(use-package rjsx-mode
  :init
  (map! :map rjsx-mode-map
        (:localleader
         (:prefix ("n" . "node")
                    "b" #'nodejs-repl-send-buffer)
         (:prefix ("t" . "tide")
                    "f" #'tide-format
                    "r" #'tide-restart-server)
                   ))
  :config
  (setq js2-mode-show-strict-warnings t))
#+end_src

*** Prettier
#+begin_src elisp
(setq prettier-js-args '(
                         "--trailing-comma" "all"
                         "--single-quote" "true"
                         "--jsx-single-quote" "true"
                         "--jsx-bracket-same-line" "false"
                         ))
#+end_src
